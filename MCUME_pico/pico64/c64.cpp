#include "pico.h"
#include "pico/stdlib.h"
#include <stdio.h>

extern "C" {
#include "emuapi.h"
#include "platform_config.h"
}

#include "Teensy64.h"
#include <string.h>

#ifdef HAS_SND
#include "reSID.h"
AudioPlaySID playSID;
#endif

using namespace std;

#ifndef PICOMPUTER
/*
static bool oskbActive=false;
*/
#endif

/* IRAM_ATTR */
static void oneRasterLine(void) {
  static unsigned short lc = 1;

  while (true) {

    cpu.lineStartTime = fbmicros(); //get_ccount();
    cpu.lineCycles = cpu.lineCyclesAbs = 0;

    if (!cpu.exactTiming) {
      vic_do();
    } else {
      vic_do_simple();
    }

    if (--lc == 0) {
      lc = LINEFREQ / 10; // 10Hz
      cia1_checkRTCAlarm();
      cia2_checkRTCAlarm();
    }

    //Switch "ExactTiming" Mode off after a while:
    if (!cpu.exactTiming) break;
    if ( (fbmicros() - cpu.exactTimingStartTime)*1000 >= EXACTTIMINGDURATION ) {
      cpu_disableExactTiming();
      break;
    }
  };

}

const uint32_t ascii2scan[] = {
      //0    1 2 3 4 5 6 7 8    9 A B C    D E F
/*0*/   0,0x4A,0,0,0,0,0,0,0x2A,0,0,0,0,0x28,0,0, // return
     //     17:down                                                     29:right
/*1*/   0x00,0x51,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4f,0x00,0x00,
      // sp  !       "     #      $      %      &      '      (        )    *    +    ,    -    .    / 
/*2*/   0x2c,0x201e,0x201f,0x2020,0x2021,0x2022,0x2023,0x2024,0x2025,0x2026,0x55,0x57,0x36,0x56,0x37,0x54,
       //0  1    2    3    4    5    6    7    8    9     :    ;    <      =    >      ?
/*3*/   0x27,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x33,0x34,0x2036,0x32,0x2037,0x2054,
       //@    A    B    C    D    E    F    G    H    I    J    K    L    M    N    O
/*4*/   47,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12,
        //P  Q    R    S    T    U    V    W    X    Y    Z    [      \     ]     ^    _  
/*5*/   0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x2026,0x31,0x2027,0x00,0x00,
/*6*/   0x2024,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x10,0x11,0x12, // ' a b c d e f g h i j k l m n o
/*7*/   0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d, 0,0,0,0x204B,0x2029, // p q r s t u v w x y z { | } ~ DEL
       //? ?                  133:f1   f2   f3   f4   f5   f6   f7   f8 
/*8*/   75,78,0x00,0x00,0x00,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x00,0x00,0x00,  // 128-143
     //     145:up                                                      157:left
/*A*/   0x00,0x2051,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x204f,0x00,0x00   // 144-159
};

// we also use USB matrix for the moment
static const uint8_t keymatrixmap[2][256] = {
  //Rows:
  // 0    1     2     3    4     5     6      7     8      9     A     B     C     D     E     F
  { 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x04, 0x04, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, //0x00
    0x10, 0x10, 0x10, 0x20, 0x80, 0x04, 0x02, 0x04, 0x08, 0x08, 0x02, 0x04, 0x08, 0x02, 0x80, 0x80, //0x10
    0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x10, 0x10, 0x01, 0x80, 0x01, 0x00, 0x80, 0x00, 0x00, 0x20, //0x20
    0x00, 0x00, 0x40, 0x20, 0x40, 0x00, 0x20, 0x20, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, //0x30
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x00, 0x00, 0x80, 0x01, //0x40
    0x00, 0x01, 0x00, 0x00, 0x40, 0x40, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x50
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x70
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x80
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x90
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xA0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xB0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xC0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xD0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xE0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x02
  }, //0xF0
  //Columns:
  // 0    1     2     3    4     5     6      7     8      9     A     B     C     D     E     F
  { 0x00, 0x00, 0x00, 0x00, 0x04, 0x10, 0x10, 0x04, 0x40, 0x20, 0x04, 0x20, 0x02, 0x04, 0x20, 0x04, //0x00
    0x10, 0x80, 0x40, 0x02, 0x40, 0x02, 0x20, 0x40, 0x40, 0x80, 0x02, 0x80, 0x02, 0x10, 0x01, 0x08, //0x10
    0x01, 0x08, 0x01, 0x08, 0x01, 0x08, 0x01, 0x08, 0x02, 0x80, 0x01, 0x00, 0x10, 0x00, 0x00, 0x40, //0x20
    0x00, 0x00, 0x20, 0x20, 0x04, 0x00, 0x80, 0x10, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, //0x30
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x40, 0x00, 0x00, 0x02, 0x04, //0x40
    0x00, 0x80, 0x00, 0x00, 0x80, 0x02, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x50
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x60
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x70
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x80
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0x90
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xA0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xB0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xC0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xD0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //0xE0
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x10, 0x80
  }
}; //0xF0 

struct {
  union {
    uint32_t kv;
    struct {
      uint8_t ke,   //Extratasten SHIFT, STRG, ALT...
              kdummy,
              k,    //Erste gedr端ckte Taste
              k2;   //Zweite gedr端ckte Taste
    };
  };
  uint32_t lastkv;
  uint8_t shiftLock;
} kbdData = {0, 0, 0};

// TODO: include
void emu_drawText(unsigned short x, unsigned short y, const char *text, unsigned short fgcolor, unsigned short bgcolor,
                  int doublesize);

void setKey(uint32_t k, bool pressed) {
  if (pressed) {
    kbdData.kv = (k << 16);
    kbdData.ke = kbdData.k2;
    kbdData.k2 = 0;
  }
  else
  {
    kbdData.kv = 0;       
  }
}

void pushStringToTextEntry(char * text) {
    char c;
    while ((c = *text++)) {
        setKey(ascii2scan[c], true); 
        sleep_ms(20);
        setKey(ascii2scan[c], false); 
        sleep_ms(20);
    }
}


uint8_t cia1PORTA(void) {

  uint8_t v;

  v = ~cpu.cia1.R[0x02] | (cpu.cia1.R[0x00] & cpu.cia1.R[0x02]);
  int keys = emu_GetPad();
#ifndef PICOMPUTER
  /*
  if (oskbActive) keys = 0;
  */
#endif  
  if (!cpu.swapJoysticks) {
    if (keys & MASK_JOY2_BTN) v &= 0xEF;
    if (keys & MASK_JOY2_UP) v &= 0xFE;
    if (keys & MASK_JOY2_DOWN) v &= 0xFD;
    if (keys & MASK_JOY2_RIGHT) v &= 0xFB;
    if (keys & MASK_JOY2_LEFT) v &= 0xF7;
  } else {
    if (keys & MASK_JOY1_BTN) v &= 0xEF;
    if (keys & MASK_JOY1_UP) v &= 0xFE;
    if (keys & MASK_JOY1_DOWN) v &= 0xFD;
    if (keys & MASK_JOY1_RIGHT) v &= 0xFB;
    if (keys & MASK_JOY1_LEFT) v &= 0xF7;
  }	


  if (kbdData.kv) { //Keine Taste gedr端ckt
    uint8_t filter = ~cpu.cia1.R[0x01] & cpu.cia1.R[0x03];
  
    if (kbdData.k) {
      if ( keymatrixmap[1][kbdData.k] & filter)  v &= ~keymatrixmap[0][kbdData.k];
    }

    if (kbdData.ke) {
      if (kbdData.ke & 0x02) { //Shift-links
        if ( keymatrixmap[1][0xff] & filter) v &= ~keymatrixmap[0][0xff];
      }
      if (kbdData.ke & 0x20) { //Shift-rechts
        if ( keymatrixmap[1][0xfe] & filter) v &= ~keymatrixmap[0][0xfe];
      }
      if (kbdData.ke & 0x11) { //Control
        if ( keymatrixmap[1][0xfd] & filter) v &= ~keymatrixmap[0][0xfd];
      }
      if (kbdData.ke & 0x88) { //Windows (=> Commodore)
        if ( keymatrixmap[1][0xfc] & filter) v &= ~keymatrixmap[0][0xfc];
      }
    }
  }
  /*
  if (v != 0xFF) {
    char tmp[20];
    memset(tmp, 32, 19); tmp[19] = 0;
    emu_drawText(0, 8, tmp, 60, 0, 0);
    snprintf(tmp, 20, "A: %xh", v);
    emu_drawText(0, 8, tmp, 60, 0, 0);
  }
  */
  return v;
}

uint8_t cia1PORTB(void) {
  uint8_t v;
  v = ~cpu.cia1.R[0x03] | (cpu.cia1.R[0x00] & cpu.cia1.R[0x02]) ;
  int keys = emu_GetPad();
#ifndef PICOMPUTER
  /*
  if (oskbActive) keys = 0;
  */
#endif  
  if (!cpu.swapJoysticks) {
    if (keys & MASK_JOY1_BTN) v &= 0xEF;
    if (keys & MASK_JOY1_UP) v &= 0xFE;
    if (keys & MASK_JOY1_DOWN) v &= 0xFD;
    if (keys & MASK_JOY1_RIGHT) v &= 0xFB;
    if (keys & MASK_JOY1_LEFT) v &= 0xF7;
  } else {
    if (keys & MASK_JOY2_BTN) v &= 0xEF;
    if (keys & MASK_JOY2_UP) v &= 0xFE;
    if (keys & MASK_JOY2_DOWN) v &= 0xFD;
    if (keys & MASK_JOY2_RIGHT) v &= 0xFB;
    if (keys & MASK_JOY2_LEFT) v &= 0xF7;
  }

  if (kbdData.kv) { //Keine Taste gedr端ckt
    uint8_t filter = ~cpu.cia1.R[0x00] & cpu.cia1.R[0x02];
    if (kbdData.k) {
      if ( keymatrixmap[0][kbdData.k] & filter) v &= ~keymatrixmap[1][kbdData.k];
    }
    if (kbdData.ke) {
      if (kbdData.ke & 0x02) { //Shift-links
        if ( keymatrixmap[0][0xff] & filter) v &= ~keymatrixmap[1][0xff];
      }
      if (kbdData.ke & 0x20) { //Shift-rechts
        if ( keymatrixmap[0][0xfe] & filter) v &= ~keymatrixmap[1][0xfe];
      }
      if (kbdData.ke & 0x11) { //Control
        if ( keymatrixmap[0][0xfd] & filter) v &= ~keymatrixmap[1][0xfd];
      }
      if (kbdData.ke & 0x88) { //Windows (=> Commodore)
        if ( keymatrixmap[0][0xfc] & filter) v &= ~keymatrixmap[1][0xfc];
      }
    }
  }
  return v;
}

static uint16_t PC_startup = 0;

void c64_Init(void)
{
  disableEventResponder();
  resetPLA();
  resetCia1();
  resetCia2();
  resetVic();
  cpu_reset();
#ifdef HAS_SND  
  playSID.begin();
  emu_sndInit();
#endif  
}


void c64_Step(void)
{
	oneRasterLine();
}

#include "ff.h"

inline static size_t fread(void* b, size_t sz1, size_t sz2, FIL* f) {
    size_t res = 0;
    f_read(f, b, sz1 * sz2, &res);
    return res;
}

static volatile bool autoload1 = false;
static volatile bool autoload2 = false;
static char autoloadFilename[FF_MAX_LFN] = { 0 };

void c64_Start(char* filename)
{
  if (filename) {
    strncpy(autoloadFilename, filename, FF_MAX_LFN);
    autoload1 = true;
  } else {
    autoloadFilename[0];
  }
}

static char textload[] = "LOAD\"\"\r\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tRUN\r";
static uint8_t nbkeys = 0;
static uint8_t kcnt = 0;
static bool toggle = true;

static char * textseq;

static bool res = false;
static volatile bool firsttime = true;
static volatile int loadtimeout = 150; //*25ms;

bool loadPrg(void) {
  if (!autoload1) return false;
  autoload1 = false;
  uint16_t start_address;
	uint16_t end_address;
	UINT reading_bytes;
  uint8_t temp[2];
///	char signature[32];
//	uint16_t T64Entries;
///	int FileStartOffset;
  FIL f;
  FIL* file = &f;
  FRESULT res = f_open(file, autoloadFilename, FA_READ);
  if (res != FR_OK) {
    char tmp[40];
    snprintf(tmp, 40, "fopen(): %d", res);
    emu_drawText(0,0,tmp,60,0,false);
    return true;
  }
  res = f_read(file, temp, 2, &reading_bytes);
  if (res != FR_OK) {
    char tmp[40];
    snprintf(tmp, 40, "f_read(): %d (%d bytes)", res, reading_bytes);
    emu_drawText(0,0,tmp,60,0,false);
  	f_close(file);
    return true;
  }
  if (reading_bytes == 2) {
    autoload2 = true;
    start_address = static_cast<uint16_t>(temp[0] | (temp[1] << 8));
    if (start_address <= 0x0801) sprintf(textload, "RUN%c", 13);
    else sprintf(textload, "SYS %d%c", start_address, 13);
    f_read(file, cpu.RAM + start_address, static_cast<UINT>(f_size(file)) - 2, &reading_bytes);

    sprintf(autoloadFilename, "SA: %04Xh L: %d", start_address, reading_bytes);

		cpu.RAM[0x2B] = 0x01;
		cpu.RAM[0x2C] = 0x08;
		start_address += static_cast<uint16_t>(reading_bytes);
		cpu.RAM[0x2D] = static_cast<uint8_t>(start_address);
		cpu.RAM[0x2E] = static_cast<uint8_t>(start_address>>8);
		cpu.RAM[0xAE] = static_cast<uint8_t>(start_address);
		cpu.RAM[0xAF] = static_cast<uint8_t>(start_address>>8);
  }
	f_close(file);
  return true;
}

void c64_Input(int bClick) {
  if (nbkeys == 0) {
    if (loadtimeout > 0) {
      loadtimeout--; 
    }
    if ( (bClick & MASK_KEY_USER1) && !(emu_GetPad() & MASK_OSKB) || autoload2 ) {
      if (loadtimeout == 0) {
        if (firsttime) {
          firsttime = false;
          loadPrg();
    emu_drawText(0,0,autoloadFilename,255,0,false);
          if (autoload2) {
            textseq = textload;
            nbkeys = strlen(textseq);   
            kcnt = 0;
          }
        }
        else {
          cpu.swapJoysticks = !cpu.swapJoysticks;
        }        
      }
    } 
    else  
    {
      kbd_state_t* pks = get_kbd_state();
      int hk = emu_ReadI2CKeyboard();
      if ( (hk != 0) && (res == false) ) {
        uint32_t v = ascii2scan[hk];
        if ( pks->bLeftShift ) {
          v |= 0x0200;
        }
        if ( pks->bRightShift ) {
          v |= 0x2000;
        }
        if ( pks->bCtrlPressed ) {
          v |= 0x1100;
        }
        if ( pks->bWinPressed ) {
          v |= 0x8800;
        }
        kbdData.shiftLock = pks->bCapsLock;
        setKey(v, true);
        res = true;
      } 
      else if (hk == 0){
        setKey(ascii2scan[hk],false);
        res = false;
      }        
    }
  }
  else {
    char k = textseq[kcnt];
    if (k != '\t') setKey(ascii2scan[k],toggle);
    if (!toggle) {
      kcnt++;
      nbkeys--;
      toggle = true;
    }
    else {
      toggle = false; 
    }
  }
}

void emu_KeyboardOnDown(int keymodifer, int key) {
}

void emu_KeyboardOnUp(int keymodifer, int key) {
}

#ifdef HAS_SND      
void  SND_Process( void * stream, int len )
{
    playSID.update(stream, len);
}
#endif  
